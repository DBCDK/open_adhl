<?php

/** Implements hook_formID_alter
 *
 * Adds settings for adhl service client
 *
 * @see ting_client_admin_webservices_settings
 * in ting_client.admin.inc
 *
 * @param $form
 * @param $form_state
 */
function open_adhl_form_ting_client_admin_webservices_settings_alter(&$form, &$form_state) {
  $form['adhl'] = array(
    '#type' => 'fieldset',
    '#title' => 'ADHL settings',
    '#description' => t('The ADHL service is used to get recommendations based on other loans'),
    '#collapsible' => TRUE,
    '#tree' => FALSE,
  );
  $form['adhl']['ting_recommendation_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Recommendation service URL'),
    '#description' => t('URL to Open ADHL webservice (Andre der har lånt...) , e.g. http://openadhl.addi.dk/3.0/'),
    '#required' => TRUE,
    '#default_value' => variable_get('ting_recommendation_url', ''),
  );
  // TODO ANA
  /*
  $form['adhl']['ting_recommendation_xsd'] = array(
    '#type' => 'textfield',
    '#title' => t('Recommendation service XSD URL'),
    '#description' => t('URL to XSD to Open ADHL webservice (Andre der har lånt...) , e.g. http://openadhl.addi.dk/3.0/adhl.xsd'),
    '#required' => TRUE,
    '#default_value' => variable_get('ting_recommendation_xsd', ''),
  );
  */

  $form['adhl']['ting_recommendation_access_token'] = array(
    '#type' => 'textfield',
    '#title' => t('Recommendation service access_token'),
    '#description' => t('Access token to Open ADHL webservice (Andre der har lånt...) , e.g. http://openadhl.addi.dk/3.0/adhl.xsd'),
    '#required' => TRUE,
    '#default_value' => variable_get('ting_recommendation_access_token', ''),
  );
}

/**
 * Implements hook_ting_client_webservice (@see ting_client.module)
 * */
function open_adhl_ting_client_webservice() {
  // TODO ANA
  $ret = array();
  $ret['adhl']['class'] = 'OpenAdhlRequest';
  $ret['adhl']['url'] = 'ting_recommendation_url';
  //$ret['adhl']['xsd_url'] = 'ting_recommendation_xsd';
  $ret['adhl']['access_token'] = 'ting_recommendation_access_token';
  return $ret;
}

/**
 * Execute adhl TopTenRequest
 * @param int $numResults
 * @return array
 */
function open_adhl_topTenRequest($numRecords) {
  $param = array(
    'numRecords' => $numRecords,
  );
  return open_adhl_request('topTen', $param);
}

/**
 * Execute adhl request
 * @param int $numResults
 * @internal param $pid
 * @return array
 */
function open_adhl_adhlRequest($pid, $numRecords) {
  $param = array(
    'id' => array( 'pid' => $pid),
    'numRecords' => $numRecords,
    'like' => array( 'pid' => $pid),
    'recommender' => 'default',
  );
 // TODO ANA
 // 'recommender' => $recommender,   //default
 // 'like' => $like,                 //["870970-basis%3A28075480"]
 // OLD return open_adhl_request('adhl', $param);
  return open_adhl_curl_request('adhl', $param);
}

/** Generic request function to call adhl webservice
 * @param $method string "adhl" || "topTen"
 * @param $params
 * @return array
 */
function open_adhl_request($method, $params) {
  $params['action'] = $method . 'Request';
  $client = new ting_client_class();
  dpm($params,'$params');
  $response = $client->do_request('adhl', $params);
  return open_adhl_parse_response($response, $method . 'Response');
}


/** Parse response from adhl request
 * @param $response
 * @return array
 */
function open_adhl_parse_response($response, $requestMethod) {

  if (!isset($response->$requestMethod)) {
    throw new Exception('No ADHL response of type: ' . $requestMethod . ' in response');
  }

  $response = $response->$requestMethod;

  if (!isset($response->pid) || empty($response->pid)) {
    return array();
  }

  $pids = array();

  foreach ($response->pid as $recommendation) {
    $pids[] = $recommendation->{'$'};
  }

  return $pids;
}

/** Generic request function to call adhl webservice
 * @param $method string "adhl" || "topTen"
 * @param $params
 * @return array
 */
function open_adhl_curl_request($method, $params) {

  // make recommender url
  $url = open_adhl_set_adhl_query($params);

  // log url for debug
  watchdog('bibdk_adhl', 'Adhlcomplete URL sent: ' . $url, array(), $severity = WATCHDOG_DEBUG);

  $options['maxTime'] = 300;

  // do call MicroURL
  $url = url($url, $options);
  $curl = new MicroCURL();
  $response = json_decode($curl->get(array($url)));
  $curl->close();

  return open_adhl_parse_curl_response($response, 'data');

}

function open_adhl_set_adhl_query(array $param) {

  // Get settings for adhl
  $url = variable_get('ting_recommendation_url', '');
  $access_token = variable_get('ting_recommendation_access_token', '');
  $numRecords = isset($param['numRecords']) ? $param['numRecords'] : 10;
  $recommender = isset($param['recommender']) ? $param['recommender'] : 'default';
  $like = _open_adhl_get_request_pids($param);

  // Create recommmender url
  $url =  $url . 'access_token=' . $access_token . '&recommender=' . $recommender . '&like=' . $like . '&limit=' . $numRecords;

  return $url;
}

/** Parse response from adhl curl request
 * @param $response
 * @param $requestMethod
 * @return array of pids
 */
function open_adhl_parse_curl_response($response, $requestMethod) {

  if (!isset($response->$requestMethod)) {
    throw new Exception('No ADHL response of type: ' . $requestMethod . ' in response');
  }

  $response = $response->$requestMethod;

  $pids = array();
  foreach ($response as $recommendation) {
    $pids[] = $recommendation->pid;
  }
  
  return $pids;
}


/** Parse response from adhl curl request
 * @param $response
 * @param $requestMethod
 * @return array of pids
 */
function _open_adhl_get_request_pids($param) {

  $request_ids = $param['like']['pid'];

  $pids = '';
  foreach ($request_ids as $request_id) {
    $pids = $pids . ',' . $request_id . ',';
  }
  // remove last ,
  rtrim($pids, ",");
  $pids = '[' . $pids . ']';
  $pids = urlencode($pids);

  return $pids;
}