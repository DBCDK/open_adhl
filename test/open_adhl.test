<?php

/**
 * @file
 * Test case for OpenHldingsStatus localisation & holdings.
 */

class OpenAdhlRequestTestCase extends DrupalUnitTestCase {

  public static function getInfo() {
    return array(
      'name' => t('Open ADHL : request test'),
      'description' => t('Check if parsing a localisationRequest return a valid array of localisations'),
      'group' => t('Bibliotek.dk - ADHL'),
    );
  }

  public function setUp() {
    parent::setUp(array('open_adhl'));
  }

  public function test_open_adhl_parse_response() {
    module_load_include('module', 'open_adhl', 'open_adhl');

    // Test invalid response
    $response = new stdClass();
    try {
      $result = open_adhl_parse_response($response, 'testEmptyResponse');
      $this->assertTrue('false', 'exception not thrown');

    } catch (Exception $e) {
      $this->assertEqual($e->getMessage(), 'No ADHL response of type: testEmptyResponse in response', 'Exception is thrown');
    }

    // Test empty response
    $response->topTenResponse = new stdClass();
    $response->topTenResponse->pid = array();
    $result = open_adhl_parse_response($response, 'topTenResponse');
    $this->assertEqual($result, array(), 'no results');
    // Test result with pids
    $response->topTenResponse->pid = array();
    $pid = new stdClass();
    $pid->{'$'} = 'test-pid1';
    $response->topTenResponse->pid[] = $pid;
    $pid = new stdClass();
    $pid->{'$'} = 'test-pid2';
    $response->topTenResponse->pid[] = $pid;
    $pid = new stdClass();
    $pid->{'$'} = 'test-pid3';
    $response->topTenResponse->pid[] = $pid;
    $pid = new stdClass();
    $pid->{'$'} = 'test-pid4';
    $response->topTenResponse->pid[] = $pid;

    $result = open_adhl_parse_response($response, 'topTenResponse');

    $expected_result = array(
      'test-pid1',
      'test-pid2',
      'test-pid3',
      'test-pid4'
    );
    $this->assertEqual($result, $expected_result, '4 pids returned');
}
}
